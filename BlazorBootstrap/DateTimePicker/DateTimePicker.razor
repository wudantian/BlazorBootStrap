@using Microsoft.JSInterop;
@using BlazorBootstrap
@inject IJSRuntime JSRuntime;
@using BlazorBootstrap.Common;

<div class="input-group input-group-sm flex-nowrap border">
    @if (IsShowTime)
    {
        <input type="datetime" class="form-control border-0" placeholder="Please input datetime" @bind="DateTime" />
    }
    else
    {
        <input type="text" class="form-control border-0" placeholder="Please input datetime" @bind="DateString" />
    }
    <div class="input-group-append">
        <span class="align-content-center align-bottom oi oi-calendar m-2" 
              @onclick="ToggleCalendar" @onmouseout="MouseOut" @onmousemove="MouseIn">
        </span>
    </div>
    <div @ref="picker" class="dropdown-menu dropdown-menu-right pl-3 pr-3 @showCss"
         @onfocusout="MenuOut" tabindex="-1" @onmouseout="MouseOut" @onmouseover="MouseIn">
        @switch (mode)
        {
            case "date":
                <DateCalendar DateTime="DateTime" IsShowTime="@IsShowTime"
                              OnMonthClick="ChangeMonthMode"
                              OnDayClick="SelecedDate"
                              OnShowTime="ChangeTimeMode" />
                break;
            case "month":
                <MonthCalendar DateTime="DateTime"
                               OnYearClick="ChangeYearMode"
                               OnMonthClick="ChangeDateMode" />
                break;
            case "year":
                <YearCalendar DateTime="DateTime"
                              OnYearClick="ChangeMonthMode" />
                break;
            case "time":
                <TimeCalendar Time="DateTime"
                              OnShowDate="ChangeDateMode" />
                break;
        }
    </div>
</div>

@code {
    [Parameter]
    public DateTime DateTime { get; set; }
    [Parameter]
    public EventCallback<DateTime> OnSelectedDate { get; set; }
    [Parameter]
    public bool IsShowTime { get; set; } = true;

    private string DateString
    {
        get
        {
            return DateTime.ToString("yyyy/MM/dd");
        }
        set
        {
            DateTime d;
            DateTime.TryParse(value, out d);
            if (d > DateTime.MinValue)
            {
                DateTime = d;
            }
            else
                DateTime = DateTime.Now;
        }
    }

    private bool isVisible = false;
    private bool isFocus = false;
    private string showCss => isVisible ? "show" : null;
    private bool isActive = false;

    private string mode = "date";

    private ElementReference picker;

    private void ToggleCalendar()
    {
        isVisible = !isVisible;
    }

    private void SelecedDate(DateTime date)
    {
        DateTime = date;
        if (OnSelectedDate.HasDelegate)
            OnSelectedDate.InvokeAsync(date);
        isVisible = false;
    }

    private void ChangeMonthMode(DateTime date)
    {
        mode = "month";
        DateTime = date;
    }

    private void ChangeYearMode(DateTime date)
    {
        mode = "year";
        DateTime = date;
    }

    private void ChangeDateMode(DateTime date)
    {
        mode = "date";
        DateTime = date;
    }

    private void ChangeTimeMode(DateTime date)
    {
        mode = "time";
        DateTime = date;
    }

    private void MenuOut()
    {
        if (!isActive)
            isVisible = false;
    }

    private void MouseIn()
    {
        isActive = true;
    }

    private void MouseOut()
    {
        isActive = false;
    }

    protected async override void OnAfterRender(bool firstRender)
    {
        if (isVisible && isFocus == false)
        {
            isFocus = true;
            await picker.Focus(JSRuntime);
        }
        if (isVisible == false)
            isFocus = false;
    }
}
